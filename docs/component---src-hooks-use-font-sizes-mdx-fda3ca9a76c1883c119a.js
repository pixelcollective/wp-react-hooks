(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{OSaw:function(e,n,t){"use strict";t.r(n),t.d(n,"default",(function(){return r}));var s=t("Fcif"),a=t("+I+c"),o=(t("mXGw"),t("/FXl")),i=t("TjRS"),c=(t("aD51"),{}),b=i.a;function r(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(o.b)(b,Object(s.a)({},c,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("h1",{id:"usefontsizes"},"useFontSizes"),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"useFontSizes")," hook provides an interface for consuming and modifying the block editor preset font sizes."),Object(o.b)("h2",{id:"basics"},"Basics"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"}," Import ")),Object(o.b)("pre",null,Object(o.b)("code",Object(s.a)({parentName:"pre"},{className:"language-jsx"}),"import {useFontSizes} from '@tinypixelco/wp-react-hooks'\n")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"}," Use ")),Object(o.b)("pre",null,Object(o.b)("code",Object(s.a)({parentName:"pre"},{className:"language-jsx"}),"const {fontSizes, setFontSizes, addColor} = useFontSizes()\n")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"}," The ",Object(o.b)("inlineCode",{parentName:"strong"},"fontSizes")," array is made up of objects that are shaped like this ")),Object(o.b)("pre",null,Object(o.b)("code",Object(s.a)({parentName:"pre"},{className:"language-jsx"}),"{\n  name: 'Small',\n  shortName: 's',\n  size: 8,\n  slug: 'small',\n}\n")),Object(o.b)("h2",{id:"list-font-sizes"},"List font sizes"),Object(o.b)("p",null,"List all the font sizes registered with WordPress."),Object(o.b)("pre",null,Object(o.b)("code",Object(s.a)({parentName:"pre"},{className:"language-jsx"}),"import {useFontSizes} from '@tinypixelco/wp-react-hooks'\n\nconst component = () => {\n  const [fontSizes] = useFontSizes()\n\n  return (\n    <div>\n      {fontSizes && JSON.stringify(fontSizes)}\n    </div>\n  )\n}\n")),Object(o.b)("h2",{id:"addfontsize"},"addFontSize"),Object(o.b)("p",null,"Add a font size to the existing presets."),Object(o.b)("pre",null,Object(o.b)("code",Object(s.a)({parentName:"pre"},{className:"language-jsx"}),"{addFontSize} = useFontSizes()\n\naddFontSize({\n  name: 'Dynamic',\n  shortName: 'd',\n  size: 69,\n  slug: 'dynamic',\n})\n")),Object(o.b)("h2",{id:"setfontsizes"},"setFontSizes"),Object(o.b)("p",null,"Replace the preset sizes with a new set."),Object(o.b)("pre",null,Object(o.b)("code",Object(s.a)({parentName:"pre"},{className:"language-jsx"}),"{setFontSizes} = useFontSizes()\n\nsetFontSizes([\n  {\n    name: 'Dynamic',\n    shortName: 'd',\n    size: 69,\n    slug: 'dynamic',\n  },\n])\n\n### addFontSize\n\n```jsx\n{fontSizes, setFontSizes} = useFontSizes()\n\nconst newFontSize = {\n  name: 'Dynamic',\n  shortName: 'd',\n  size: 69,\n  slug: 'dynamic',\n}\n\nuseEffect(() => {\n  setSettings({\n    fontSizes: [\n      ...fontSizes,\n      newFontSize,\n    ],\n  })\n}, [])\n")),Object(o.b)("pre",null,Object(o.b)("code",Object(s.a)({parentName:"pre"},{}),"\nexport const _frontmatter = {}\n")))}void 0!==r&&r&&r===Object(r)&&Object.isExtensible(r)&&!r.hasOwnProperty("__filemeta")&&Object.defineProperty(r,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/hooks/useFontSizes.mdx"}}),r.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-hooks-use-font-sizes-mdx-fda3ca9a76c1883c119a.js.map