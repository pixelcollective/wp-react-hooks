{"version":3,"sources":["webpack:///../src/hooks/useFontSizes.mdx"],"names":["layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"0MAYMA,G,UAAc,IACdC,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,gBADR,gBAGA,4BAAW,0BAAYC,WAAW,KAAvB,gBAAX,+FACA,iBAAQ,CACN,GAAM,UADR,UAGA,qBAAG,sBAAQA,WAAW,KAAnB,aACH,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,+DAIL,qBAAG,sBAAQA,WAAW,KAAnB,UACH,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,iEAIL,qBAAG,sBAAQA,WAAW,KAAnB,QAAgC,0BAAYA,WAAW,UAAvB,aAAhC,4DACH,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,8EASL,iBAAQ,CACN,GAAM,mBADR,mBAGA,2EACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,+NAcL,iBAAQ,CACN,GAAM,eADR,eAGA,iEACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,kIAWL,iBAAQ,CACN,GAAM,gBADR,gBAGA,iEACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,2bAkCL,uBAAK,gCAAMA,WAAW,OAAU,IAA3B,6C,0MAMTJ,EAAWK,gBAAiB","file":"component---src-hooks-use-font-sizes-mdx-fda3ca9a76c1883c119a.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/kellymears/code/projects/cli/bud/bud-sandbox/web/app/themes/wp-react-hooks/node_modules/gatsby-theme-docz/src/base/Layout.js\";\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"usefontsizes\"\n    }}>{`useFontSizes`}</h1>\n    <p>{`The `}<inlineCode parentName=\"p\">{`useFontSizes`}</inlineCode>{` hook provides an interface for consuming and modifying the block editor preset font sizes.`}</p>\n    <h2 {...{\n      \"id\": \"basics\"\n    }}>{`Basics`}</h2>\n    <p><strong parentName=\"p\">{` Import `}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import {useFontSizes} from '@tinypixelco/wp-react-hooks'\n`}</code></pre>\n    <p><strong parentName=\"p\">{` Use `}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`const {fontSizes, setFontSizes, addColor} = useFontSizes()\n`}</code></pre>\n    <p><strong parentName=\"p\">{` The `}<inlineCode parentName=\"strong\">{`fontSizes`}</inlineCode>{` array is made up of objects that are shaped like this `}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`{\n  name: 'Small',\n  shortName: 's',\n  size: 8,\n  slug: 'small',\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"list-font-sizes\"\n    }}>{`List font sizes`}</h2>\n    <p>{`List all the font sizes registered with WordPress.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import {useFontSizes} from '@tinypixelco/wp-react-hooks'\n\nconst component = () => {\n  const [fontSizes] = useFontSizes()\n\n  return (\n    <div>\n      {fontSizes && JSON.stringify(fontSizes)}\n    </div>\n  )\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"addfontsize\"\n    }}>{`addFontSize`}</h2>\n    <p>{`Add a font size to the existing presets.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`{addFontSize} = useFontSizes()\n\naddFontSize({\n  name: 'Dynamic',\n  shortName: 'd',\n  size: 69,\n  slug: 'dynamic',\n})\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"setfontsizes\"\n    }}>{`setFontSizes`}</h2>\n    <p>{`Replace the preset sizes with a new set.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`{setFontSizes} = useFontSizes()\n\nsetFontSizes([\n  {\n    name: 'Dynamic',\n    shortName: 'd',\n    size: 69,\n    slug: 'dynamic',\n  },\n])\n\n### addFontSize\n\n\\`\\`\\`jsx\n{fontSizes, setFontSizes} = useFontSizes()\n\nconst newFontSize = {\n  name: 'Dynamic',\n  shortName: 'd',\n  size: 69,\n  slug: 'dynamic',\n}\n\nuseEffect(() => {\n  setSettings({\n    fontSizes: [\n      ...fontSizes,\n      newFontSize,\n    ],\n  })\n}, [])\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`\nexport const _frontmatter = {}\n`}</code></pre>\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}