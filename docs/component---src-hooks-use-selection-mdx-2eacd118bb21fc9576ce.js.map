{"version":3,"sources":["webpack:///../src/hooks/useSelection.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"wPAMaA,G,UAAe,S,4MAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,gBADR,gBAGA,4BAAW,0BAAYC,WAAW,KAAvB,gBAAX,wFACA,iBAAQ,CACN,GAAM,SADR,SAGA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,+DAIL,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,uDAIL,iBAAQ,CACN,GAAM,aACL,0BAAYA,WAAW,MAAvB,cACH,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,+NAcL,4BAAW,0BAAYA,WAAW,KAAvB,aAAX,4BACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,qJAUL,iBAAQ,CACN,GAAM,gBADR,gBAGA,4DACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,2ZAsBL,0CAAyB,0BAAYA,WAAW,KAAvB,gBAAzB,8BACA,sBACE,kBAAIA,WAAW,MAAf,kGACA,kBAAIA,WAAW,MAAf,8JACA,kBAAIA,WAAW,MAAf,WAAgC,0BAAYA,WAAW,MAAvB,gBAAhC,gCAEF,0H,0MAKJJ,EAAWK,gBAAiB","file":"component---src-hooks-use-selection-mdx-2eacd118bb21fc9576ce.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/kellymears/code/projects/cli/bud/bud-sandbox/web/app/themes/wp-react-hooks/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"useselection\"\n    }}>{`useSelection`}</h1>\n    <p>{`The `}<inlineCode parentName=\"p\">{`useSelection`}</inlineCode>{` hook provides a way of consuming and modifying which blocks are currently selected.`}</p>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import {useSelection} from '@tinypixelco/wp-react-hooks'\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`const {selection, setSelection} = useSelection()\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"selection\"\n    }}><inlineCode parentName=\"h2\">{`selection`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import {useSelection} from '@tinypixelco/wp-react-hooks'\n\nconst component = () => {\n  const {selection} = useSelection()\n\n  return (\n    <div>\n      {selection && JSON.stringify(selection)}\n    </div>\n  )\n}\n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`selection`}</inlineCode>{` object looks like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`{\n  attributes: {}\n  clientId: \"881d5ee3-1672-4607-8b65-1fa7877adf0d\"\n  innerBlocks: []\n  isValid: true\n  name: 'acme-co/acme-block'\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"setselection\"\n    }}>{`setSelection`}</h2>\n    <p>{`This block will always be selected.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import {useSelection} from '@tinypixelco/wp-react-hooks'\n\nconst component = ({clientId}) => {\n  const {selection, setSelection} = useSelection()\n\n  useEffect(() => {\n    const notSelected = selection.clientId !== clientId\n\n    if (notSelected) {\n      setSelection(clientId)\n    }\n  }, [selection])\n\n  return (\n    <div>\n      Annoyingly, this block is always selected.\n    </div>\n  )\n}\n`}</code></pre>\n    <p>{`Any actual use of `}<inlineCode parentName=\"p\">{`setSelection`}</inlineCode>{` would likely involve you:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Getting the block ID you want to select. There are other hooks in this library which may help.`}</li>\n      <li parentName=\"ul\">{`Developing criteria that needs to be met to trigger the selection (our example sidesteps this by just always firing, which is probably not what you want.)`}</li>\n      <li parentName=\"ul\">{`Calling `}<inlineCode parentName=\"li\">{`setSelection`}</inlineCode>{` when that criteria is met.`}</li>\n    </ul>\n    <p>{`But, this example allows us to demonstrate the functionality of the component in isolation.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}